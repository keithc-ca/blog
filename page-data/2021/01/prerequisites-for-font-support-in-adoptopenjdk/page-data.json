{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021/01/prerequisites-for-font-support-in-adoptopenjdk/","result":{"data":{"site":{"siteMetadata":{"title":"AdoptOpenJDK Blog","siteUrl":"https://blog.adoptopenjdk.net","social":{"twitter":"AdoptOpenJDK"}}},"mdx":{"id":"4f090666-db65-5b56-8143-06aea71b1be2","excerpt":"Back in the day when everybody got their JDK from Sun and later Oracle it included an  assortment of fonts  that could be used in addition to the fontsâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Prerequisites for Font Support in AdoptOpenJDK\",\n  \"date\": \"2021-01-22T14:30:00+00:00\",\n  \"author\": \"andreasahlenstorf\",\n  \"description\": \"Proper font support in AdoptOpenJDK requires some additional configuration on Linux and Solaris. Without it, you get unhelpful NullPointerExceptions.\",\n  \"tags\": [\"announcement\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Back in the day when everybody got their JDK from Sun and later Oracle it included an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.oracle.com/javase/7/docs/technotes/guides/intl/font.html#lucida\"\n  }), \"assortment of fonts\"), \" that could be used in addition to the fonts installed on the host. OpenJDK has not bundled any fonts for years (if it ever has), and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.oracle.com/java/technologies/javase/jdk-11-relnote.html#Removed\"\n  }), \"Oracle did away with the bundled fonts starting with Oracle JDK 11\"), \". Already with OpenJDK 9 \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.oracle.com/javase/9/intl/font-configuration-files.htm\"\n  }), \"font configuration files were removed except on Windows\"), \".\"), mdx(\"p\", null, \"This has a couple of implications for OpenJDK distributions, including AdoptOpenJDK: Your system might need additional packages and configuration beyond the AdoptOpenJDK installation for proper font support, especially on Linux.\"), mdx(\"h2\", null, \"macOS, and Windows\"), mdx(\"p\", null, \"Font integration should work out of the box, no matter whether you are using binary builds (compressed tarballs, ZIP archives) or operating system packages (if available).\"), mdx(\"h2\", null, \"Linux\"), mdx(\"p\", null, \"On Linux, you need \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.freetype.org/\"\n  }), \"Freetype\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://fontconfig.org/\"\n  }), \"Fontconfig\"), \" to enable OpenJDK to discover and use fonts. If you have neither, you might stumble upon unhelpful exceptions like:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-text\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Caused by: java.lang.NullPointerException\\n    at java.desktop/sun.awt.FontConfiguration.getVersion(FontConfiguration.java:1288)\\n    at java.desktop/sun.awt.FontConfiguration.readFontConfigFile(FontConfiguration.java:225)\\n    at java.desktop/sun.awt.FontConfiguration.init(FontConfiguration.java:107)\\n    at java.desktop/sun.awt.X11FontManager.createFontConfiguration(X11FontManager.java:765)\\n    at java.desktop/sun.font.SunFontManager$2.run(SunFontManager.java:440)\\n    at java.base/java.security.AccessController.doPrivileged(Native Method)\\n    at java.desktop/sun.font.SunFontManager.<init>(SunFontManager.java:385)\\n    at java.desktop/sun.awt.FcFontManager.<init>(FcFontManager.java:35)\\n    at java.desktop/sun.awt.X11FontManager.<init>(X11FontManager.java:56)\\n    ... 36 more\"))), mdx(\"p\", null, \"In addition to that, you need some fonts. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://dejavu-fonts.github.io\"\n  }), \"DejaVu\"), \" is a family of free fonts based on Vera and included in most (if not all) Linux distributions. This makes it a solid choice. The following commands should install all the necessary packages:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Debian/Ubuntu/Mint: \", mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"apt-get install libfreetype6 fontconfig fonts-dejavu\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"RHEL/CentOS/Fedora: \", mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"yum install freetype fontconfig dejavu-sans-fonts\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"SLES/OpenSUSE: \", mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"zypper install libfreetype6 fontconfig dejavu-fonts\"))), mdx(\"p\", null, \"If you have a desktop environment installed on your system, those packages should already be present, and there is nothing left to do. If you have installed AdoptOpenJDK \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"using our operating system packages (rpm, deb)\"), \", all necessary packages will automatically be installed starting with 8u282, 11.0.10, and 15.0.2 released in January 2021.\"), mdx(\"h2\", null, \"AIX\"), mdx(\"p\", null, \"On AIX, the situation is similar to Linux. You need \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.freetype.org/\"\n  }), \"Freetype\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://fontconfig.org/\"\n  }), \"Fontconfig\"), \", and fonts. On the systems available to us, everything came with the operating system and as such, Java could use the fonts out of the box. \"), mdx(\"h2\", null, \"Solaris\"), mdx(\"p\", null, \"On Solaris, you need \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.freetype.org/\"\n  }), \"Freetype\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://fontconfig.org/\"\n  }), \"Fontconfig\"), \", and fonts, too. You should be able to install those using:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-text\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"pkg install system/library/freetype-2\\npkg install font/truetype/dejavu\"))), mdx(\"p\", null, \"If you have a desktop environment installed, all the necessary libraries should already be present.\"), mdx(\"h2\", null, \"Checking the Font Support\"), mdx(\"p\", null, \"If you want to test whether the font support works on your system, here is a small sample program that should output the name of fonts installed on your system if everything is alright:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"java\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-java\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"import\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token namespace\"\n  }), \"java\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"awt\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\")), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"*\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"FontTest\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"static\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"main\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"String\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), \" args\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"String\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), \" names \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"GraphicsEnvironment\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"getLocalGraphicsEnvironment\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"getAvailableFontFamilyNames\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"System\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"out\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"println\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"\\\"Found \\\"\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"+\"), \" names\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"length \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"+\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"\\\" fonts:\\\"\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"for\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"String\"), \" name \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \":\"), \" names\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"System\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"out\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"println\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"name\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\")))), mdx(\"p\", null, \"That\\u2019s the output on a Fedora 33 system without desktop environment that was configured according to the instructions given above:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-text\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Found 8 fonts:\\nDejaVu Sans\\nDejaVu Sans Condensed\\nDejaVu Sans Light\\nDialog\\nDialogInput\\nMonospaced\\nSansSerif\\nSerif\"))), mdx(\"p\", null, \"The list of fonts varies depending on the operating system and its configuration.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Prerequisites for Font Support in AdoptOpenJDK","author":"andreasahlenstorf","date":"January 22, 2021","description":"Proper font support in AdoptOpenJDK requires some additional configuration on Linux and Solaris. Without it, you get unhelpful NullPointerExceptions.","tags":["announcement"],"featuredImage":null}}},"pageContext":{"slug":"/prerequisites-for-font-support-in-adoptopenjdk/","postPath":"/2021/01/prerequisites-for-font-support-in-adoptopenjdk/","previous":{"fields":{"slug":"/eclipse-adoptium-projects-ready-for-community-review/","postPath":"/2020/12/eclipse-adoptium-projects-ready-for-community-review/"},"frontmatter":{"title":"Eclipse Adoptium Projects Ready for Community Review","tags":["AdoptOpenJDK","Eclipse","Foundation"]}},"next":{"fields":{"slug":"/adoptopenjdk-8u282-11010-and-1502-available/","postPath":"/2021/01/adoptopenjdk-8u282-11010-and-1502-available/"},"frontmatter":{"title":"AdoptOpenJDK 8u282, 11.0.10, and 15.0.2 Available","tags":["announcement"]}}}},"staticQueryHashes":["1790439409","3142611149","368503166"]}