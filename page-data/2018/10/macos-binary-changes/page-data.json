{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018/10/macos-binary-changes/","result":{"data":{"site":{"siteMetadata":{"title":"AdoptOpenJDK Blog","siteUrl":"https://blog.adoptopenjdk.net","social":{"twitter":"AdoptOpenJDK"}}},"mdx":{"id":"59078c15-06bd-56d7-aa08-b7c37a5f727c","excerpt":"As a result of a recent change in our build scripts, the directory layout of our macOS tarballs has changed. Many developers had requested that we ship our…","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"MacOS Binary Changes\",\n  \"date\": \"2018-10-05T18:30:25+00:00\",\n  \"author\": \"georgeadams\",\n  \"description\": \"As a result of a recent change in our build scripts, the directory layout of our macOS tarballs has changed. Many developers had requested that we ship our binaries in the native macOS binary layout rather than our traditional JDK layout.\",\n  \"tags\": [\"announcements\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"As a result of a recent change in our build scripts, the directory layout of our macOS tarballs has changed. Many developers had requested that we ship our binaries in the native macOS binary layout rather than our traditional JDK layout.\"), mdx(\"h2\", null, \"Why the change?\"), mdx(\"p\", null, \"There are several good reasons to change the directory layout to match most of the other Java implementations. The main reason that we have chosen to do so is to allow our Homebrew recipes to be merged into core making it much easier for developers to easily download our binaries!\"), mdx(\"h2\", null, \"What does this mean for me?\"), mdx(\"p\", null, \"Essentially the directory tree has changed, previously when you extracted our macOS tarballs the \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"bin\"), \" and \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"lib\"), \" directories were located in the root directory. Native macOS Java binaries alongside most other Java implementations don\\u2019t come bundled this way. Instead a \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"Contents\"), \" directory containing \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"Home\"), \" and \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"MacOS\"), \" directories along with an \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"Info.plist\"), \" file is shipped.\"), mdx(\"h2\", null, \"What do I need to change?\"), mdx(\"p\", null, \"The actual OpenJDK binary is identical so your Java applications will run in the exact same way but you may need to modify your \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"PATH\"), \" to accommodate these changes. If you are looking for the \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"bin\"), \" and \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"lib\"), \" directories, they are now located inside \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"Contents/Home/bin\"), \" and \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"Contents/Home/lib\"), \".\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \".\\n\\u2514\\u2500\\u2500 Contents\\n    \\u251C\\u2500\\u2500 Home\\n    \\u2502   \\u251C\\u2500\\u2500 bin\\n    \\u2502   \\u251C\\u2500\\u2500 conf\\n    \\u2502   \\u251C\\u2500\\u2500 demo\\n    \\u2502   \\u251C\\u2500\\u2500 include\\n    \\u2502   \\u251C\\u2500\\u2500 jmods\\n    \\u2502   \\u251C\\u2500\\u2500 legal\\n    \\u2502   \\u251C\\u2500\\u2500 lib\\n    \\u2502   \\u251C\\u2500\\u2500 man\\n    \\u2502   \\u2514\\u2500\\u2500 release\\n    \\u251C\\u2500\\u2500 Info.plist\\n    \\u2514\\u2500\\u2500 MacOS\\n        \\u2514\\u2500\\u2500 libjli.dylib -> ../Home/lib/jli/libjli.dylib\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"MacOS Binary Changes","author":"georgeadams","date":"October 05, 2018","description":"As a result of a recent change in our build scripts, the directory layout of our macOS tarballs has changed. Many developers had requested that we ship our binaries in the native macOS binary layout rather than our traditional JDK layout.","tags":["announcements"],"featuredImage":null}}},"pageContext":{"slug":"/macos-binary-changes/","postPath":"/2018/10/macos-binary-changes/","previous":{"fields":{"slug":"/using-icedtea-web-browser-plug-in-with-adoptopenjdk/","postPath":"/2018/10/using-icedtea-web-browser-plug-in-with-adoptopenjdk/"},"frontmatter":{"title":"Using IcedTea-Web (to run JNLP) with AdoptOpenJDK.","tags":["faq"]}},"next":{"fields":{"slug":"/whats-up-at-adoptopenjdk/","postPath":"/2019/04/whats-up-at-adoptopenjdk/"},"frontmatter":{"title":"What’s up at AdoptOpenJDK","tags":null}}}},"staticQueryHashes":["1790439409","3142611149","368503166"]}